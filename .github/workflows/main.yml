# This is a basic workflow to help you get started with Actions

name: main

# Controls when the workflow will run
# Triggers the workflow on push or pull request events
on: [ push, pull_request, workflow_dispatch ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Linux build
  linux:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ninja-build cmake qttools5-dev qtbase5-dev libjack-jackd2-dev portaudio19-dev

      # Runs a set of commands using the runners shell
      - name: Build
        run: |
          git submodule -q update --init --recursive
          mkdir build
          cmake -S . -B build -GNinja
          cmake --build build --target package --config RelWithDebInfo

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          # Artifact name
          name: "waveOverUDP-linux" # optional, default is artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: build/*.zip

  # Windows 32 and 64 bits build
  windows:
    # The type of runner that the job will run on
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        config:
          - arch: 32
          - arch: 64

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Install dependencies
        id: dependencies
        run: |
          echo "Checking latest version of Jack ..."
          $JACK_RELEASES_URL = "https://api.github.com/repos/jackaudio/jack2/releases"
          $jack_releases = Invoke-WebRequest $JACK_RELEASES_URL | ConvertFrom-Json
          $jack_latest_version = $jack_releases[0].tag_name
          
          if ($jack_latest_version -eq "") {
            Write-Error "Failed to retrieve latest version"
            exit 1
          }
          
          echo "Downloading Jack win${{ matrix.config.arch }} $jack_latest_version ..."
          $downloadUrl = "https://github.com/jackaudio/jack2-releases/releases/download/$jack_latest_version/jack2-win${{ matrix.config.arch }}-$jack_latest_version.exe"
          $exePath = "$($env:TEMP)\jack2_installer.exe"
          
          echo "Downloading from $downloadUrl"
          (New-Object Net.WebClient).DownloadFile($downloadUrl, $exePath)
          echo "Installing..."
          cmd /c start /wait $exePath /SILENT /NORESTART /NOICONS /TYPE=full
          echo "Done installing Jack win${{ matrix.config.arch }} $jack_latest_version"
          
          echo "::set-output name=JACK_VERSION::$jack_latest_version"
          
          pip install -U pip
          pip install --pre aqtinstall
          pip show aqtinstall
          
          if ( ${{ matrix.config.arch }} -eq 64 ) {
            $qt_latest_version = python3 -m aqt list-qt windows desktop --latest-version
          } else {
            # Latest 32 bits version of qt is 5.x branch as 6.x dropped 32 bits versions
            $qt_latest_version = python3 -m aqt list-qt windows desktop --spec 5 --latest-version
          }
          
          echo "Installing Qt $qt_latest_version"
          $cnt = 0
          do {
              $cnt++
              python3 -m aqt install-qt -O c:\Qt windows desktop $qt_latest_version win${{ matrix.config.arch }}_mingw81
              if ($lastexitcode -ne 0 -and $cnt -ge 5) {
                exit $lastexitcode
              }
          } while ($lastexitcode -ne 0)
          
          echo "Installing win${{ matrix.config.arch }}_mingw810"
          $cnt = 0
          do {
              $cnt++
              python3 -m aqt install-tool -O c:\Qt windows desktop tools_mingw qt.tools.win${{ matrix.config.arch }}_mingw810
              if ($lastexitcode -ne 0 -and $cnt -ge 5) {
                exit $lastexitcode
              }
          } while ($lastexitcode -ne 0)
          
          echo "::set-output name=QT_PATH::C:\Qt\$qt_latest_version\mingw81_${{ matrix.config.arch }}"
          echo "::set-output name=MINGW_PATH::C:\Qt\Tools\mingw810_${{ matrix.config.arch }}"

      # Runs a set of commands using the runners shell
      - name: Build
        run: |
          echo "Using MinGW at ${{ steps.dependencies.outputs.MINGW_PATH }}"
          echo "Using Qt at ${{ steps.dependencies.outputs.QT_PATH }}"
          
          $env:CC="gcc.exe"
          $env:CXX="g++.exe"
          $env:PATH="C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw${{ matrix.config.arch }}\bin;$env:PATH"
          git submodule -q update --init --recursive
          mkdir build
          
          cmake -S . -B build "-GMinGW Makefiles" "-DCMAKE_PREFIX_PATH=${{ steps.dependencies.outputs.QT_PATH }}\lib\cmake"
          if ($lastexitcode -ne 0) { exit $lastexitcode }
          
          cmake --build build --target package --config RelWithDebInfo -- -j4
          if ($lastexitcode -ne 0) { exit $lastexitcode }

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          # Artifact name
          name: "waveOverUDP-win${{ matrix.config.arch }}" # optional, default is artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: build/*.zip
